# -*- coding: utf-8 -*-
"""Deep learning_preprocess_tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N5Ar73fk0tqQiyZDFbw95lxHCLlDqWly

Preprocess
"""

import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras import datasets

(train_x, train_y), (test_x, test_y) = datasets.mnist.load_data()

train_x = train_x[..., tf.newaxis]
test_x = test_x[..., tf.newaxis]

train_x = train_x / 255.
test_x = test_x / 255.

"""Build Model"""

input_shape = (28, 28, 1)
num_classes = 10

learning_rate = 0.001

inputs = layers.Input(input_shape)
net = layers.Conv2D(32, (3,3), padding='SAME')(inputs) #28x28을 32x32로 바꿔주고, kernel size를 3x3으로 바꿔줌.
net = layers.Activation('relu')(net)
net = layers.Conv2D(32, (3,3), padding='SAME')(net)
net = layers.Activation('relu')(net)
net = layers.MaxPooling2D(pool_size=(2,2))(net)
net = layers.Dropout(0.5)(net)

net = layers.Conv2D(64, (3,3), padding='SAME')(net) #output을 64x64로 바꿔주고, kernel size를 3x3으로 바꿔줌.
net = layers.Activation('relu')(net)
net = layers.Conv2D(64, (3,3), padding='SAME')(net)
net = layers.Activation('relu')(net)
net = layers.MaxPooling2D(pool_size=(2,2))(net)
net = layers.Dropout(0.5)(net)

net = layers.Flatten()(net)
net = layers.Dense(512)(net)
net = layers.Activation('relu')(net)
net = layers.Dropout(0.5)(net)
net = layers.Dense(num_classes)(net)
net = layers.Activation('softmax')(net)
model = tf.keras.Model(inputs, net, name='Basic_CNN')
#model = tf.keras.Model(inputs=inputs, ouputs=net, name='Basic_CNN')

#Model is the full model w/o custom layers
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

"""Training"""

num_epochs = 1
batch_size = 64

model.fit(train_x, train_y, batch_size=batch_size, shuffle=True)
model.evaluate(test_x, test_y, batch_size=batch_size)





